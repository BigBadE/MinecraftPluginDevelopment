/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package software.bigbade.minecraftplugindevelopment;

import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;

/**
 * A simple 'hello world' plugin.
 */
public class MinecraftPluginDevelopmentPlugin implements Plugin<Project> {
    public static final Logger LOGGER = LoggerFactory.getLogger(MinecraftPluginDevelopmentPlugin.class);

    public void apply(Project project) {
        project.getExtensions().create("minecraft", PluginDevelopmentExtension.class);

        PluginDevelopmentExtension extension = project.getExtensions().findByType(PluginDevelopmentExtension.class);
        assert extension != null;
        project.afterEvaluate(found -> {
            try {
                setupDependencies(extension, project);
            } catch (MalformedURLException | URISyntaxException e) {
                LOGGER.error("Error getting server software.", e);
            }
        });

        project.getTasks().create("buildSpigot", MinecraftPluginTask.class, task -> {
            task.getOutputs().upToDateWhen(found -> false);
            task.setGroup("IDE");
        });
    }

    public void setupDependencies(PluginDevelopmentExtension extension, Project project) throws MalformedURLException, URISyntaxException {
        URI url;
        String dependency;
        //TODO add paper, mockbukkit, and annotationprocessor for core (Maybe with jitpack?)
        if ("spigot".equals(extension.serverSoftware)) {
            url = new URL("http" + (extension.useHTTPS ? "s" : "")
                    + "://hub.spigotmc.org/nexus/content/repositories/snapshots/").toURI();
            dependency = "org.spigotmc:spigot-api:" + extension.localVersion + "-R0.1-SNAPSHOT";
        } else {
            throw new IllegalArgumentException("Unknown server software: " + extension.serverSoftware);
        }
        project.getRepositories().jcenter();
        project.getRepositories().maven(maven -> maven.setUrl(url));
        project.getDependencies().add("compileOnly", dependency);
    }
}
